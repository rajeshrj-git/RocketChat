name: Deploy Rocket.Chat to AWS EKS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Build & Push Mongo
      - name: Build and Push Mongo
        run: |
          docker build -t mongo:latest ./mongo
          docker tag mongo:latest 099751327699.dkr.ecr.us-east-1.amazonaws.com/mongo:latest
          docker push 099751327699.dkr.ecr.us-east-1.amazonaws.com/mongo:latest

      # Build & Push Rocket.Chat
      - name: Build and Push Rocket.Chat
        run: |
          docker build -t rocketchat:latest ./rocketchat
          docker tag rocketchat:latest 099751327699.dkr.ecr.us-east-1.amazonaws.com/rocketchat:latest
          docker push 099751327699.dkr.ecr.us-east-1.amazonaws.com/rocketchat:latest

  terraform:
    name: Terraform Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
  